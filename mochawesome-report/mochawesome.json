{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T22:12:49.762Z",
    "end": "2023-09-30T22:12:49.775Z",
    "duration": 13,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b7310eaf-7a07-47cb-b0d5-c9c9c44611b2",
      "title": "",
      "fullFile": "D:\\Automation\\test\\numbers-validator\\test.spec.js",
      "file": "\\test\\numbers-validator\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "94644cc7-6064-41b4-bbc4-17fa8baf3c12",
          "title": "NumbersValidator",
          "fullFile": "D:\\Automation\\test\\numbers-validator\\test.spec.js",
          "file": "\\test\\numbers-validator\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4c2548e9-c416-4678-b2b3-2eafc015230d",
              "title": "isNumberEven",
              "fullFile": "D:\\Automation\\test\\numbers-validator\\test.spec.js",
              "file": "\\test\\numbers-validator\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for even numbers",
                  "fullTitle": "NumbersValidator isNumberEven should return true for even numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(validator.isNumberEven(2), true);",
                  "err": {},
                  "uuid": "1b95eb07-9c9f-44c6-abfe-126a25f7ba99",
                  "parentUUID": "4c2548e9-c416-4678-b2b3-2eafc015230d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for odd numbers",
                  "fullTitle": "NumbersValidator isNumberEven should return false for odd numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(validator.isNumberEven(3), false);",
                  "err": {},
                  "uuid": "d762aaa2-96b0-4762-a498-d71da6780e09",
                  "parentUUID": "4c2548e9-c416-4678-b2b3-2eafc015230d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-number inputs",
                  "fullTitle": "NumbersValidator isNumberEven should throw an error for non-number inputs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => validator.isNumberEven('not a number'), Error);",
                  "err": {},
                  "uuid": "cb7baef6-eeae-4a65-bd17-c51d1a6548fa",
                  "parentUUID": "4c2548e9-c416-4678-b2b3-2eafc015230d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b95eb07-9c9f-44c6-abfe-126a25f7ba99",
                "d762aaa2-96b0-4762-a498-d71da6780e09",
                "cb7baef6-eeae-4a65-bd17-c51d1a6548fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "328fda72-99f7-479a-862a-9eae985c393e",
              "title": "getEvenNumbersFromArray",
              "fullFile": "D:\\Automation\\test\\numbers-validator\\test.spec.js",
              "file": "\\test\\numbers-validator\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of even numbers",
                  "fullTitle": "NumbersValidator getEvenNumbersFromArray should return an array of even numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputArray = [1, 2, 3, 4, 5];\nconst result = validator.getEvenNumbersFromArray(inputArray);\nassert.deepStrictEqual(result, [2, 4]);",
                  "err": {},
                  "uuid": "7d1ac9ff-5a4e-48c4-a0ef-5f13261b627c",
                  "parentUUID": "328fda72-99f7-479a-862a-9eae985c393e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-number elements in the array",
                  "fullTitle": "NumbersValidator getEvenNumbersFromArray should throw an error for non-number elements in the array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputArray = [1, 2, 'three', 4, 5];\nassert.throws(() => validator.getEvenNumbersFromArray(inputArray), Error);",
                  "err": {},
                  "uuid": "6290eb12-6a81-4b5b-90b7-c2675abdb2d2",
                  "parentUUID": "328fda72-99f7-479a-862a-9eae985c393e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for non-array inputs",
                  "fullTitle": "NumbersValidator getEvenNumbersFromArray should throw an error for non-array inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => validator.getEvenNumbersFromArray('not an array'), Error);",
                  "err": {},
                  "uuid": "152d19db-a326-4880-b5df-454fe506e03a",
                  "parentUUID": "328fda72-99f7-479a-862a-9eae985c393e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d1ac9ff-5a4e-48c4-a0ef-5f13261b627c",
                "6290eb12-6a81-4b5b-90b7-c2675abdb2d2",
                "152d19db-a326-4880-b5df-454fe506e03a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ccfddb4-5b22-4102-be0e-b8fd98960d47",
              "title": "isAllNumbers",
              "fullFile": "D:\\Automation\\test\\numbers-validator\\test.spec.js",
              "file": "\\test\\numbers-validator\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for an array of numbers",
                  "fullTitle": "NumbersValidator isAllNumbers should return true for an array of numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputArray = [1, 2, 3, 4, 5];\nconst result = validator.isAllNumbers(inputArray);\nassert.strictEqual(result, true);",
                  "err": {},
                  "uuid": "76f29ae8-30db-476f-970a-eeb6921be706",
                  "parentUUID": "9ccfddb4-5b22-4102-be0e-b8fd98960d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for an empty array",
                  "fullTitle": "NumbersValidator isAllNumbers should return true for an empty array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputArray = [];\nconst result = validator.isAllNumbers(inputArray);\nassert.strictEqual(result, true);",
                  "err": {},
                  "uuid": "6cb3116e-309b-4650-a687-1673f1314809",
                  "parentUUID": "9ccfddb4-5b22-4102-be0e-b8fd98960d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for a non-array input",
                  "fullTitle": "NumbersValidator isAllNumbers should throw an error for a non-array input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputArray = 'not an array';\nassert.throws(() => validator.isAllNumbers(inputArray), { name: 'Error' });",
                  "err": {},
                  "uuid": "4b0b8b0e-15b7-4cff-8732-9f859e938e53",
                  "parentUUID": "9ccfddb4-5b22-4102-be0e-b8fd98960d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for an object input",
                  "fullTitle": "NumbersValidator isAllNumbers should throw an error for an object input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputArray = { key: 'value' };\nassert.throws(() => validator.isAllNumbers(inputArray), { name: 'Error' });",
                  "err": {},
                  "uuid": "fbda7f8c-23b0-40e0-b7af-f434fde2353c",
                  "parentUUID": "9ccfddb4-5b22-4102-be0e-b8fd98960d47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76f29ae8-30db-476f-970a-eeb6921be706",
                "6cb3116e-309b-4650-a687-1673f1314809",
                "4b0b8b0e-15b7-4cff-8732-9f859e938e53",
                "fbda7f8c-23b0-40e0-b7af-f434fde2353c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ebcf165-0dba-442f-8fea-eacfd4723409",
              "title": "isInteger",
              "fullFile": "D:\\Automation\\test\\numbers-validator\\test.spec.js",
              "file": "\\test\\numbers-validator\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for a valid integer",
                  "fullTitle": "NumbersValidator isInteger should return true for a valid integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const integer = 42;\nconst result = validator.isInteger(integer);\nassert.strictEqual(result, true);",
                  "err": {},
                  "uuid": "a7dfaaa6-d689-496f-a90a-fba621f58638",
                  "parentUUID": "0ebcf165-0dba-442f-8fea-eacfd4723409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for zero",
                  "fullTitle": "NumbersValidator isInteger should return true for zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const zero = 0;\nconst result = validator.isInteger(zero);\nassert.strictEqual(result, true);",
                  "err": {},
                  "uuid": "0b805918-53b0-42d6-8940-def8df55b357",
                  "parentUUID": "0ebcf165-0dba-442f-8fea-eacfd4723409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for a non-integer number",
                  "fullTitle": "NumbersValidator isInteger should return false for a non-integer number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonInteger = 3.14;\nconst result = validator.isInteger(nonInteger);\nassert.strictEqual(result, false);",
                  "err": {},
                  "uuid": "17613afa-64c2-43d4-b93c-7ff38cb1f47b",
                  "parentUUID": "0ebcf165-0dba-442f-8fea-eacfd4723409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for a non-number input",
                  "fullTitle": "NumbersValidator isInteger should throw an error for a non-number input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonNumber = 'not a number';\nassert.throws(() => validator.isInteger(nonNumber), Error);",
                  "err": {},
                  "uuid": "cc7d068f-8051-457e-a58c-67e2e4cbb3fb",
                  "parentUUID": "0ebcf165-0dba-442f-8fea-eacfd4723409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for an object input",
                  "fullTitle": "NumbersValidator isInteger should throw an error for an object input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { key: 'value' };\nassert.throws(() => validator.isInteger(obj), Error);",
                  "err": {},
                  "uuid": "b9a72a56-26bb-4b49-88d1-dc9386d27b5b",
                  "parentUUID": "0ebcf165-0dba-442f-8fea-eacfd4723409",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7dfaaa6-d689-496f-a90a-fba621f58638",
                "0b805918-53b0-42d6-8940-def8df55b357",
                "17613afa-64c2-43d4-b93c-7ff38cb1f47b",
                "cc7d068f-8051-457e-a58c-67e2e4cbb3fb",
                "b9a72a56-26bb-4b49-88d1-dc9386d27b5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}